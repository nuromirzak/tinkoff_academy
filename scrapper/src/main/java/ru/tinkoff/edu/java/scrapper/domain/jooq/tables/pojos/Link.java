/*
 * This file is generated by jOOQ.
 */

package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos;

import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.LocalDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.JSON;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Link implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer linkId;
    private String url;
    private LocalDateTime lastUpdated;
    private LocalDateTime lastScrapped;
    private JSON jsonProps;

    public Link() {
    }

    public Link(Link value) {
        this.linkId = value.linkId;
        this.url = value.url;
        this.lastUpdated = value.lastUpdated;
        this.lastScrapped = value.lastScrapped;
        this.jsonProps = value.jsonProps;
    }

    @ConstructorProperties({"linkId", "url", "lastUpdated", "lastScrapped", "jsonProps"})
    public Link(
        @NotNull Integer linkId,
        @NotNull String url,
        @NotNull LocalDateTime lastUpdated,
        @Nullable LocalDateTime lastScrapped,
        @Nullable JSON jsonProps
    ) {
        this.linkId = linkId;
        this.url = url;
        this.lastUpdated = lastUpdated;
        this.lastScrapped = lastScrapped;
        this.jsonProps = jsonProps;
    }

    /**
     * Getter for <code>LINK.LINK_ID</code>. Уникальный идентификатор ссылки в
     * базе данных
     */
    @NotNull
    public Integer getLinkId() {
        return this.linkId;
    }

    /**
     * Setter for <code>LINK.LINK_ID</code>. Уникальный идентификатор ссылки в
     * базе данных
     */
    public void setLinkId(@NotNull Integer linkId) {
        this.linkId = linkId;
    }

    /**
     * Getter for <code>LINK.URL</code>. URL отслеживаемой ссылки
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 256)
    @NotNull
    public String getUrl() {
        return this.url;
    }

    /**
     * Setter for <code>LINK.URL</code>. URL отслеживаемой ссылки
     */
    public void setUrl(@NotNull String url) {
        this.url = url;
    }

    /**
     * Getter for <code>LINK.LAST_UPDATED</code>. Время последнего действия с
     * этой ссылкой
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Setter for <code>LINK.LAST_UPDATED</code>. Время последнего действия с
     * этой ссылкой
     */
    public void setLastUpdated(@NotNull LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    /**
     * Getter for <code>LINK.LAST_SCRAPPED</code>. Время последнего скрапинга
     * этой ссылки
     */
    @Nullable
    public LocalDateTime getLastScrapped() {
        return this.lastScrapped;
    }

    /**
     * Setter for <code>LINK.LAST_SCRAPPED</code>. Время последнего скрапинга
     * этой ссылки
     */
    public void setLastScrapped(@Nullable LocalDateTime lastScrapped) {
        this.lastScrapped = lastScrapped;
    }

    /**
     * Getter for <code>LINK.JSON_PROPS</code>. Дополнительные свойства ссылки в
     * формате JSON
     */
    @Nullable
    public JSON getJsonProps() {
        return this.jsonProps;
    }

    /**
     * Setter for <code>LINK.JSON_PROPS</code>. Дополнительные свойства ссылки в
     * формате JSON
     */
    public void setJsonProps(@Nullable JSON jsonProps) {
        this.jsonProps = jsonProps;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Link other = (Link) obj;
        if (this.linkId == null) {
            if (other.linkId != null) {
                return false;
            }
        } else if (!this.linkId.equals(other.linkId)) {
            return false;
        }
        if (this.url == null) {
            if (other.url != null) {
                return false;
            }
        } else if (!this.url.equals(other.url)) {
            return false;
        }
        if (this.lastUpdated == null) {
            if (other.lastUpdated != null) {
                return false;
            }
        } else if (!this.lastUpdated.equals(other.lastUpdated)) {
            return false;
        }
        if (this.lastScrapped == null) {
            if (other.lastScrapped != null) {
                return false;
            }
        } else if (!this.lastScrapped.equals(other.lastScrapped)) {
            return false;
        }
        if (this.jsonProps == null) {
            if (other.jsonProps != null) {
                return false;
            }
        } else if (!this.jsonProps.equals(other.jsonProps)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.linkId == null) ? 0 : this.linkId.hashCode());
        result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
        result = prime * result + ((this.lastUpdated == null) ? 0 : this.lastUpdated.hashCode());
        result = prime * result + ((this.lastScrapped == null) ? 0 : this.lastScrapped.hashCode());
        result = prime * result + ((this.jsonProps == null) ? 0 : this.jsonProps.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Link (");

        sb.append(linkId);
        sb.append(", ").append(url);
        sb.append(", ").append(lastUpdated);
        sb.append(", ").append(lastScrapped);
        sb.append(", ").append(jsonProps);

        sb.append(")");
        return sb.toString();
    }
}
